{"ast":null,"code":"var _jsxFileName = \"/Users/oslavko/Documents/dev/merchantspring/coding-challenge/coding-challenge-ui/src/components/OrdersTable.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport ReactPaginate from \"react-paginate\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledTableList = styled.table`\n  width: 100%;\n  font-family: \"Roboto\", sans-serif;\n  text-align: left;\n  border-collapse: collapse;\n  th {\n    background-color: #f2f5f9;\n    color: #888888;\n    font-weight: light;\n    font-size: small;\n  }\n  td, th {\n    border: 1px solid #f0f0f0;\n    border-left: none;\n    border-right: none;\n    padding-top: 20px;\n    padding-bottom: 20px;\n    padding-left: 20px;\n  }\n`;\n_c = StyledTableList;\nconst getFlagEmoji = country => {\n  switch (country) {\n    case \"AUS\":\n      return 'ðŸ‡¦ðŸ‡º';\n    case \"GBR\":\n      return 'ðŸ‡¬ðŸ‡§';\n    case \"USA\":\n      return 'ðŸ‡ºðŸ‡¸';\n    default:\n      return '';\n  }\n};\nexport const OrdersTable = ({\n  orderItems,\n  itemsPerPage\n}) => {\n  _s();\n  const [currentPage, setCurrentPage] = useState(0);\n  const [totalPages, setTotalPages] = useState(orderItems ? Math.ceil(orderItems.length / itemsPerPage) : 0);\n  const startIndex = currentPage * itemsPerPage;\n  const endIndex = startIndex + itemsPerPage;\n  const subset = orderItems && orderItems.slice(startIndex, endIndex);\n  const handlePageChange = selectedPage => {\n    setCurrentPage(selectedPage.selected);\n  };\n  console.log(orderItems);\n  console.log(totalPages);\n  return /*#__PURE__*/_jsxDEV(StyledTableList, {\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"MARKETPLACE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"STORE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"ORDER ID\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"ORDER VALUE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"ITEMS\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"DESTINATION\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"DAYS OVERDUE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: [subset && subset.map(orderItem => /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: [getFlagEmoji(orderItem.storeCountry), \" \", orderItem.marketplace]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: orderItem.storeName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: orderItem.orderId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: new Intl.NumberFormat('en-AU', {\n            style: 'currency',\n            currency: 'AUD'\n          }).format(Number(orderItem.orderValue))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: orderItem.items\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: orderItem.destination\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: orderItem.latest_ship_date\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(ReactPaginate, {\n        pageCount: totalPages,\n        onPageChange: handlePageChange,\n        pageRangeDisplayed: 2,\n        forcePage: currentPage,\n        previousLabel: \"<<\",\n        nextLabel: \">>\",\n        renderOnZeroPageCount: null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(OrdersTable, \"74UJfcrqbw7wwGyaYz7Yl+iFY6A=\");\n_c2 = OrdersTable;\nvar _c, _c2;\n$RefreshReg$(_c, \"StyledTableList\");\n$RefreshReg$(_c2, \"OrdersTable\");","map":{"version":3,"names":["React","useState","styled","ReactPaginate","jsxDEV","_jsxDEV","StyledTableList","table","_c","getFlagEmoji","country","OrdersTable","orderItems","itemsPerPage","_s","currentPage","setCurrentPage","totalPages","setTotalPages","Math","ceil","length","startIndex","endIndex","subset","slice","handlePageChange","selectedPage","selected","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","map","orderItem","storeCountry","marketplace","storeName","orderId","Intl","NumberFormat","style","currency","format","Number","orderValue","items","destination","latest_ship_date","pageCount","onPageChange","pageRangeDisplayed","forcePage","previousLabel","nextLabel","renderOnZeroPageCount","_c2","$RefreshReg$"],"sources":["/Users/oslavko/Documents/dev/merchantspring/coding-challenge/coding-challenge-ui/src/components/OrdersTable.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { Order } from \"./OverdueOrders\";\nimport ReactPaginate from \"react-paginate\";\n\nconst StyledTableList = styled.table`\n  width: 100%;\n  font-family: \"Roboto\", sans-serif;\n  text-align: left;\n  border-collapse: collapse;\n  th {\n    background-color: #f2f5f9;\n    color: #888888;\n    font-weight: light;\n    font-size: small;\n  }\n  td, th {\n    border: 1px solid #f0f0f0;\n    border-left: none;\n    border-right: none;\n    padding-top: 20px;\n    padding-bottom: 20px;\n    padding-left: 20px;\n  }\n`;\n\ntype OrdersTableProps = {\n  orderItems: Order[] | null;\n  itemsPerPage: number;\n}\n\nconst getFlagEmoji = (country?: string): string => {\n  switch (country) {\n    case \"AUS\":\n      return 'ðŸ‡¦ðŸ‡º';\n    case \"GBR\":\n      return 'ðŸ‡¬ðŸ‡§';\n    case \"USA\":\n      return 'ðŸ‡ºðŸ‡¸';\n    default:\n      return '';\n  }\n};\n\nexport const OrdersTable = ({ orderItems, itemsPerPage }: OrdersTableProps) => {\n  const [currentPage, setCurrentPage] = useState(0);\n  const [totalPages, setTotalPages] = useState(orderItems ? Math.ceil(orderItems.length / itemsPerPage) : 0);\n\n  const startIndex = currentPage * itemsPerPage;\n  const endIndex = startIndex + itemsPerPage;\n  const subset = orderItems && orderItems.slice(startIndex, endIndex);\n\n  const handlePageChange = (selectedPage: any) => {\n    setCurrentPage(selectedPage.selected);\n  };\n\n  console.log(orderItems);\n  console.log(totalPages);\n\n  return (\n    <StyledTableList>\n      <thead>\n        <tr>\n          <th>MARKETPLACE</th>\n          <th>STORE</th>\n          <th>ORDER ID</th>\n          <th>ORDER VALUE</th>\n          <th>ITEMS</th>\n          <th>DESTINATION</th>\n          <th>DAYS OVERDUE</th>\n        </tr>\n      </thead>\n      <tbody>\n        {subset && subset.map(orderItem => (\n          <tr>\n            <td>{getFlagEmoji(orderItem.storeCountry)} {orderItem.marketplace}</td>\n            <td>{orderItem.storeName}</td>\n            <td>{orderItem.orderId}</td>\n            <td>\n              {\n                new Intl.NumberFormat(\n                  'en-AU',\n                  { style: 'currency', currency: 'AUD' }\n                )\n                .format(Number(orderItem.orderValue))\n              }\n            </td>\n            <td>{orderItem.items}</td>\n            <td>{orderItem.destination}</td>\n            <td>{orderItem.latest_ship_date}</td>\n          </tr>\n        ))}\n        <ReactPaginate \n          pageCount={totalPages}\n          onPageChange={handlePageChange}\n          pageRangeDisplayed={2}\n          forcePage={currentPage}\n          previousLabel={\"<<\"}\n          nextLabel={\">>\"}\n          renderOnZeroPageCount={null}\n        />\n      </tbody>\n    </StyledTableList>\n  );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}